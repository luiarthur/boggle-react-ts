{"version":3,"sources":["util.ts","Die.tsx","Matrix.ts","Pair.ts","Board.ts","BoardComp.tsx","Seeder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GLOBAL_RNG","rng","this","seedrandom","seed","reseed","shuffle","arr","i","length","j","Math","floor","isSquare","x","sqrtx","sqrt","DieComp","props","value","className","Die","faces","numFaces","a","b","idx","dice16","map","_","split","Matrix","rows","nrow","ncol","forEach","row","Error","f","r","c","out","push","flat","v","util","vec","fromArray","s","shuffled","set","get","tabulate","m","fill","elem","Array","from","Pair","y","that","diff","minus","abs","possibleMoves","Board","dice","dictionary","minLetters","dim","numDice","letters","shortDict","shake","shortenDict","filter","w","letterSet","Set","has","roll","console","log","path","pair","join","pos","_visited","equals","move","plus","proposal","propose","visited","onBoard","dict","solution","isValidMove","sols","newPath","concat","head","chain","toUpperCase","newDict","word","startsWith","newSolution","includes","_solve","allSolutions","sort","BoardComp","board","style","marginLeft","marginRight","SolveButton","borderRadius","backgroundColor","color","border","onClick","generateSolution","showSolution","Seeder","e","target","random","toString","showSeeder","seedViz","type","onChange","autoFocus","App","scrabbleDict","useState","setSeedViz","setBoard","setSolution","setNumWords","isSolved","setIsSolved","setLetters","setShowSolution","background","margin","solutionArray","solve","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd35d55e.chunk.js","sourcesContent":["import seedrandom from 'seedrandom'\n\nexport type RNG = () => number\n\nexport class AppRNG {\n  rng: RNG\n\n  constructor() {\n    this.rng = seedrandom()\n  }\n\n  reseed(seed: string) {\n    this.rng = seedrandom(seed)\n  }\n}\n\nexport const GLOBAL_RNG = new AppRNG()\nexport function reseed(seed: string) { GLOBAL_RNG.reseed(seed) }\n\nexport function randint(a: number, b: number) {\n  return Math.floor(GLOBAL_RNG.rng() * (b - a + 1)) + a\n}\n\nexport function setdiff(a, b) {\n  return [...a].filter(x => !b.has(x));\n}\n\nexport function shuffle<T>(arr: Array<T>): Array<T> {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(GLOBAL_RNG.rng() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr\n}\n\nexport function isSquare(x: number) {\n  let sqrtx = Math.sqrt(x)\n  return Math.floor(sqrtx) == sqrtx\n}\n\nexport function last<T>(arr: Array<T>): T {\n  return arr[arr.length - 1]\n}\n","import React from 'react';\nimport * as util from './util'\nimport './App.css'\n\ntype DieProps = { faces: string[] }\n\nexport function DieComp(props: {value: string}) {\n  let value = props.value\n  if (value.length == 1) {\n    // value = \"\\u00A0\" + value\n  }\n  return (\n    <button className=\"die\"> {value} </button>\n  )\n}\n\nexport class Die {\n  numFaces: number\n  faces: string[]\n\n  constructor(faces: string[]) {\n    this.faces = faces\n    this.numFaces = faces.length\n  }\n\n  roll() {\n    const idx = util.randint(1, this.numFaces)\n    return this.faces[idx - 1]\n  }\n}\n\nexport const dice16 = [\n  \"A,A,E,E,G,N\",\n  \"A,B,B,J,O,O\",\n  \"A,C,H,O,P,S\",\n  \"A,F,F,K,P,S\",\n  \"A,O,O,T,T,W\",\n  \"C,I,M,O,T,U\",\n  \"D,E,I,L,R,X\",\n  \"D,E,L,R,V,Y\",\n  \"D,I,S,T,T,Y\",\n  \"E,E,G,H,N,W\",\n  \"E,E,I,N,S,U\",\n  \"E,H,R,T,V,W\",\n  \"E,I,O,S,S,T\",\n  \"E,L,R,T,T,Y\",\n  \"H,I,M,N,U,Qu\",\n  \"H,L,N,N,R,Z\"].map(_ => _.split(','))\n","import * as util from './util'\n\n// Row Major\nexport class Matrix<T> {\n  nrow: number\n  ncol: number\n  rows: T[][]\n\n  static fromArray<T>(nrow: number,  ncol: number, arr: T[]) {\n    return Matrix.tabulate(nrow, ncol, (r, c) => arr[r * ncol + c])\n  }\n\n  static tabulate<T>(nrow: number,  ncol: number, f: (r:number, c:number) => T): Matrix<T> {\n    let m = Matrix.fill(nrow, ncol, f(0, 0))\n    for (let r = 0; r < nrow; r++) {\n      for (let c = 0; c < ncol; c++) {\n        m.set(r, c, f(r, c))\n      }\n    }\n    return m\n  }\n\n  static fill<T>(nrow: number,  ncol: number, elem: T) {\n    let rows = Array.from(Array(nrow), () => new Array(ncol).fill(elem));\n    return new this(rows)\n  }\n\n  constructor(rows: T[][]) {\n    this.rows = rows\n    this.nrow = rows.length\n    this.ncol = rows[0].length\n    rows.forEach(row => {\n      if (row.length != this.ncol) {\n       throw new Error(\"Number of elements is not the same in each row!\")\n      }\n    })\n  }\n\n  forEach(f: (r:number, c:number) => void) {\n    for (let r = 0; r < this.nrow; r++) {\n      for (let c = 0; c < this.ncol; c++) {\n        f(r, c)\n      }\n    }\n  }\n\n  set(r: number, c: number, value: T) {\n    (this.rows[r])[c] = value\n  }\n\n  get(r: number, c: number) {\n    return this.rows[r][c]\n  }\n\n  indices() {\n    let out:number[][] = [];\n    for (let r=0; r < this.nrow; r++) {\n      for (let c=0; c < this.ncol; c++) {\n        out.push([r, c])\n      }\n    }\n    return out\n  }\n\n  vec(): T[] {\n    return this.rows.flat();\n  }\n\n  shuffled() {\n    let v = util.shuffle(this.vec())\n    return Matrix.fromArray(this.nrow, this.ncol, v)\n  }\n\n  shuffle() {\n    let s = this.shuffled()\n    this.forEach((r, c) => {\n      this.set(r, c, s.get(r, c))\n    })\n  }\n\n  map(f: Function): Matrix<T> {\n    return Matrix.tabulate(this.nrow, this.nrow, (r, c) => f(this.get(r, c)))\n  }\n}\n","export class Pair {\n  x: number\n  y: number\n  static possibleMoves = [\n    new Pair(0, 1),\n    new Pair(1, 0),\n    new Pair(1, 1),\n    new Pair(-1, -1),\n    new Pair(0, -1),\n    new Pair(-1, 0),\n    new Pair(-1, 1),\n    new Pair(1, -1)\n  ]\n\n  constructor(x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  plus(that: Pair): Pair {\n    return new Pair(this.x + that.x, this.y + that.y)\n  }\n\n  minus(that: Pair): Pair {\n    return new Pair(this.x - that.x, this.y - that.y)\n  }\n\n  isNeighbor(that: Pair, dist: number = 1) {\n    let diff = this.minus(that)\n    return Math.abs(diff.x) <= 1 && Math.abs(diff.y) <= 1\n  }\n\n  equals(that: Pair) {\n    return (this.x == that.x) && (this.y == that.y)\n  }\n }\n","import * as util from './util'\nimport { Matrix} from './Matrix'\nimport { Pair } from './Pair'\nimport { Die, DieComp } from './Die'\n\nexport class Board {\n  dice: Die[]\n  dictionary: string[]\n  minLetters: number\n  dim: number\n  numDice: number\n  letters: Matrix<string>\n  shortDict: string[]\n\n  /**\n   * Returns a shortened dictionary by excluding words that \n   *     1. have fewer than `  minLetters` letters, and\n   *     2. have letters not appearing on the board.\n   * Note that this slows down initialization of the board, but solving is\n   * substantially faster. The alternative is searching on a much larger initial \n   * dictionary, which slows down solving. In most cases, people will shuffle and\n   * then pause to play the game, and then click solve. In this case, shuffling speed\n   * will be irrelavent and solving will be seeminglyinstantaneous.\n   */\n  shortenDict(letters: Matrix<string>, dictionary: string[], minLetters: number) {\n    let shortDict = this.dictionary.filter(w => w.length >= this.minLetters)\n    let letterSet = new Set(this.letters.vec())\n    return shortDict.filter(w => util.setdiff(new Set(w.split('')), letterSet).length == 0)\n  }\n\n  shake() {\n    this.letters = Matrix.fromArray(this.dim, this.dim,\n      util.shuffle(this.dice.map(_ => _.roll())))\n    console.log(\"Board was shaken.\")\n  }\n\n  constructor(dice: Die[], dictionary: string[], minLetters: number=3) {\n    this.dice = dice\n    this.dictionary = dictionary\n    this.minLetters = minLetters\n    this.numDice = dice.length\n    this.dim = Math.sqrt(this.numDice)\n    this.shake()\n    this.shortDict = this.shortenDict(this.letters, this.dictionary, this.minLetters)\n    if (!util.isSquare(this.dim)) {\n      throw new Error(`number of dice is ${this.numDice} but must be a square number!`)\n    }\n  }\n\n  // Connects letters from visited `path`.\n  chain(path: Pair[]): string {\n    return path.map(pair => this.letters.get(pair.x, pair.y)).join(\"\")\n  }\n\n  visited(path: Pair[], pos: Pair): boolean {\n    // return path.includes(pos)\n    let _visited = false\n    for (const pair of path) {\n      if (pair.equals(pos)) {\n        _visited = true\n        break\n      }\n    }\n    return _visited\n  }\n\n  onBoard(pos: Pair): boolean {\n    return 0 <= pos.x && pos.x < this.dim && 0 <= pos.y && pos.y < this.dim\n  }\n\n  propose(path: Pair[], move: Pair): Pair {\n    return util.last(path).plus(move)\n  }\n\n  isValidMove(path: Pair[], move: Pair): boolean {\n    let proposal = this.propose(path, move)\n    return (!this.visited(path, proposal)) && this.onBoard(proposal)\n  }\n\n  private _solve(dict: string[], path: Pair[], solution: string[]=[]): string[] {\n    if (dict.length == 0) { return solution } else {\n      // All possible moves.\n      let possibleMoves = Pair.possibleMoves.filter(move => this.isValidMove(path, move))\n\n      // Create each possible chain of letters given current path.\n      let sols = possibleMoves.map(move => {\n        let newPath = path.concat(this.propose(path, move))\n        let head = this.chain(newPath).toUpperCase()\n        let newDict = dict.filter(word => word.startsWith(head))\n        let newSolution = newDict.includes(head) ? solution.concat(head) : solution\n        return this._solve(newDict, newPath, newSolution)\n      })\n      return Array.from(new Set(sols.flat()))\n    }\n  }\n\n  solve(): string[] {\n    let allSolutions = Matrix.tabulate(this.dim, this.dim, (r, c) => {\n      // console.log(`\\r (${r}, ${c}) / (${this.dim}, ${this.dim})`)\n      return this._solve(this.shortDict, [new Pair(r, c)])\n    }).map(_ => _.flat())\n    let out = Array.from(new Set(allSolutions.vec().flat()))\n    return out.sort().sort((a, b) => a.length - b.length) // sort by first letter then length.\n  }\n}\n","import React, { useState } from 'react'\nimport { Matrix } from './Matrix'\nimport { Board } from './Board'\nimport { DieComp } from './Die'\n\nexport function BoardComp(props: {board: Board}) {\n  let dim = props.board.dim\n  return (\n    <table style={{marginLeft:\"auto\", marginRight:\"auto\"}}>\n      <tbody>\n        {\n          props.board.letters.rows.map((row, r) => (\n            <tr key={r}>\n              {row.map((value, c) => (<th key={c}><DieComp value={value}/></th>))}\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport function SolveButton(props: {generateSolution: () => void, solution: string, isSolved: boolean,\n                            showSolution: boolean}) {\n  const css = {\n    borderRadius: \"5px\",\n    backgroundColor: \"CornFlowerblue\",\n    color: \"White\",\n    border: \"none\"\n  }\n\n  return (\n    <div>\n      <button style={css} onClick={props.generateSolution}> Show / Hide Solution </button>\n      <br/><br/> \n      { props.showSolution && <p> {props.solution} </p> }\n    </div>\n  )\n}\n","import React, {useState} from 'react'\nimport * as util from './util'\n\n// TODO: Refactor -- Eventually, we want to pass an rng into board.\nexport function Seeder(props: {seedViz: boolean, showSeeder: () => void}) {\n\n  function reseed(e) {\n    const value = e.target.value\n    console.log(\"Reseeding\")\n    if (value == \"\") {\n      util.reseed(Math.random().toString())\n    } else {\n      util.reseed(value)\n    }\n  }\n\n  function makeHeader() {\n    if (props.seedViz) {\n      return (<input type=\"text\" onChange={reseed} autoFocus />)\n    } else {\n      return (<h1> Boggle </h1>)\n    }\n  }\n\n  return (\n    <header className=\"App-header\" onClick={props.showSeeder} >\n      { makeHeader() }\n    </header>\n  )\n}\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport { Die, dice16, DieComp } from './Die'\n// import { scrabbleDict } from './scrabble-dict'\nimport { Pair } from './Pair'\nimport { Board } from './Board'\nimport { BoardComp, SolveButton } from './BoardComp'\nimport * as util from './util'\nimport $ from 'jquery'\nimport {Seeder} from './Seeder'\nimport * as scrabbleDict from './scrabble-dict.json'\n\nfunction App() {\n  const dict = scrabbleDict.scrabbleDict\n  const dice = dice16.map(faces => new Die(faces))\n  const minLetters = 3\n\n  const [seedViz, setSeedViz] = useState(false)\n  // NOTE: Doing `useState(new Board(dice, dict, minLetters))` led to\n  // unintended behavior.\n  const [board, setBoard] = useState(() => new Board(dice, dict, minLetters))\n  const [solution, setSolution] = useState(\"\")\n  const [numWords, setNumWords] = useState(0)\n  const [isSolved, setIsSolved] = useState(false)\n\n  const shuffleStyle = {\n    borderRadius: \"5px\",\n    border: \"none\",\n    color: \"white\", \n    background: \"CornFlowerBlue\",\n    margin: \"20px\"\n  }\n\n  let [letters, setLetters] = useState(board.letters)\n  let [showSolution, setShowSolution] = useState(false)\n\n  function shakeBoard() {\n    // NOTE: Should this also be `() => new Board(dice, dict, minLetters)`?\n    setBoard(new Board(dice, dict, minLetters))\n    setLetters(board.letters)\n    setIsSolved(false)\n    setShowSolution(false)\n    setSolution(\"\")\n    setSeedViz(false)\n  }\n\n  function generateSolution() {\n    if (!isSolved) {\n      const solutionArray = board.solve()\n      setNumWords(solutionArray.length)\n      console.log(\"Number of words in solution: \" + solutionArray.length)\n      setSolution(solutionArray.join(\", \"))\n      setIsSolved(true)\n      setShowSolution(true)\n    } else {\n      setShowSolution(!showSolution)\n    }\n  }\n\n  function showSeeder() {\n    setSeedViz(true)\n  }\n\n  return (\n    <div className=\"App\">\n      <Seeder seedViz={seedViz} showSeeder={showSeeder} />\n\n      <button onClick={shakeBoard} style={shuffleStyle}> Shuffle </button>\n\n      {/* <br/> {dieComps} <br/> */}\n      <BoardComp board={board} />\n      <br/> \n        <SolveButton generateSolution={generateSolution} solution={solution} \n          isSolved={isSolved} showSolution={showSolution} /> \n        <br/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}